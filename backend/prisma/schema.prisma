// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role_platform {
  WEB
  APP
}

enum role_users {
  USER
  ADMIN
}

model tb_municipality {
  id                String        @id @default(uuid())
  municipality_name String
  cnpj              String
  state_name        String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  deleted_at        DateTime?
  agent             tb_agent[]
  client            tb_client[]
  category          tb_category[]
  image             tb_image[]
  threat            tb_threat[]
  call              tb_call[]
}

model tb_agent {
  id              String          @id @default(uuid())
  name            String
  birth_date      DateTime
  email           String          @unique
  password        String          @unique
  role_users      role_users      @default(ADMIN)
  role_platform   role_platform   @default(WEB)
  municipality_id String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  municipality    tb_municipality @relation(fields: [municipality_id], references: [id])
}

model tb_category {
  id              String          @id @default(uuid())
  title           String
  municipality_id String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  threat          tb_threat[]
  municipality    tb_municipality @relation(fields: [municipality_id], references: [id])
}

model tb_image {
  id              String          @id @default(uuid())
  fileName        String
  contentLength   Float
  contentType     String
  municipality_id String
  url             String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  threat          tb_threat?
  call            tb_call?
  municipality    tb_municipality @relation(fields: [municipality_id], references: [id])
}

model tb_threat {
  id              String          @id @default(uuid())
  category_id     String
  title           String
  threat_level    Int
  description     String
  municipality_id String
  image_id        String          @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  category        tb_category     @relation(fields: [category_id], references: [id])
  calls           tb_call[]
  image           tb_image        @relation(fields: [image_id], references: [id])
  municipality    tb_municipality @relation(fields: [municipality_id], references: [id])
}

model tb_client {
  id              String          @id @default(uuid())
  name            String
  gender          String
  birth_date      DateTime
  email           String          @unique
  role_platform   role_platform   @default(APP)
  municipality_id String
  password        String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  municipality    tb_municipality @relation(fields: [municipality_id], references: [id])
}

model tb_call {
  id              String          @id @default(uuid())
  threat_id       String
  latitude        String
  title           String
  longitude       String
  municipality_id String
  address         String
  image_id        String          @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  image           tb_image        @relation(fields: [image_id], references: [id])
  threat          tb_threat       @relation(fields: [threat_id], references: [id])
  municipality    tb_municipality @relation(fields: [municipality_id], references: [id])
}
